# ==============================================================
# src/main/resources/application.properties
# ==============================================================
# = Server port to use
# ==============================================================
server.port=8090
# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.cache=FALSE
# ==============================================================
# = Disable the Whitelabel Error Page
# ==============================================================
server.error.whitelabel.enabled=FALSE
# ==============================================================
# = DATA SOURCE - MySQL
# ==============================================================
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${DB_URL}?useSSL=false
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASS}
# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select username, password_hash, id from users where username=?
#spring.queries.roles-query=select u.user_name, r.role from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.user_name=?
# Don't want to use roles for now so set all as ADMIN
# ==============================================================
# if you want to use hasRole('ADMIN'), use this:
#spring.queries.roles-query=select user_name, 'ROLE_ADMIN' AS 'role' from users where user_name=?
# ==============================================================
# if you want to use hasAuthority('ADMIN'), use this:
spring.queries.roles-query=select username, 'ADMIN' AS 'role' from users where username=?
# ==============================================================
# = JPA / HIBERNATE
# ==============================================================
# Configure Hibernate DDL mode: create / update
# 	spring.jpa.properties.hibernate.hbm2ddl.auto = create
# 	spring.jpa.properties.hibernate.hbm2ddl.auto = update
#
# Create the Database with hbm2ddl.auto
# Ensure the hbm2ddl is enabled (value "create"). NOTE, this needs to be done once !!!, after creating the initial DB setup change to update
# This will drop the database at application startup and will re-create the database tables according to the entity classes found in the project.
# ==============================================================
# Log JPA queries
spring.jpa.show-sql=TRUE
spring.jpa.properties.hibernate.hbm2ddl.auto=update
# Spring ignores those hidden fields by default
spring.mvc.hiddenmethod.filter.enabled=TRUE
# help with detailed logging regarding HTTP errors
logging.level.org.springframework.web=DEBUG
# MultipartFile size
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB
# AWS properties
amazon.s3.bucket-name=${BUCKET_NAME}
amazon.s3.endpoint=${S3_ENDPOINT}
amazon.s3.access-key=${AWS_IAM_ACCESS_KEY}
amazon.s3.secret-key=${AWS_IAM_SECRET_KEY}
# Spring boot mail service
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${GMAIL_ADDRESS}  
spring.mail.password=${GMAIL_PASSWORD}
# Other properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true




