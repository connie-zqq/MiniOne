package edu.northeastern.minione.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import edu.northeastern.minione.model.Follow;
import edu.northeastern.minione.model.Space;
import edu.northeastern.minione.model.User;
import edu.northeastern.minione.repository.FollowRepository;
import edu.northeastern.minione.service.MomentService;
import edu.northeastern.minione.service.UserService;

@Controller
public class MomentController {

    @Autowired
    private MomentService momentService;

    @Autowired
    private UserService userService;

    @Autowired
    private FollowRepository followRepository;

    /**
     * Display the space's form.
     *
     * @return
     */
    @GetMapping(value = "/space/create-space")
    public ModelAndView showCreateSpaceForm() {
        return new ModelAndView("space/create-space", "space", new Space());
    }

    /**
     * Save the input information of the space into database. Display the submitted data.
     *
     * @param space
     * @param bindingResult
     * @param model
     * @return
     */
    @PostMapping("/space/create-space")
    public ModelAndView creatSpace(@ModelAttribute("space") Space space, BindingResult bindingResult, Model model) {
        if (space.getSpaceName().isEmpty()) {
            bindingResult.rejectValue("spaceName", "error.post", "Space name cannot be empty");
        }

        // Todo: waiting for the authentication
//        Get the owner of the space
//        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//        User user = this.userService.findUserByUserName(auth.getName());

        User user = new User(7L, "fu", "Fufu", "Zhang", "1004@qq.com");
        if (user == null) {
            bindingResult.rejectValue("owner", "error.post", "Owner cannot be null");
        }
        if (bindingResult.hasErrors()) {
            return new ModelAndView("space/create-space-error");
        }
        space.setOwner(user);

        this.momentService.createSpace(space);   // Save the data in the database

        // Todo: how to automatically put data into the follow table generated by Hibernate
        Follow follow = new Follow(user, space);
        followRepository.saveAndFlush(follow);

        model.addAttribute("spaceId", space.getId());
        model.addAttribute("spaceOwnerUserName", space.getOwner().getUserName());
        model.addAttribute("spaceDescription", space.getSpaceDescription());
        model.addAttribute("spaceName", space.getSpaceName());
        model.addAttribute("spaceCreatedDateTime", space.getCreatedDateTime());
        return new ModelAndView("space/create-space-success", "space", model);
    }

    /**
     * Show the space Homepage for
     *
     * @param id
     * @param model
     * @return
     */
    @GetMapping("/space/{id}")
    public ModelAndView spaceIndex(@PathVariable("id") Long id, Model model) {
        Optional<Space> space = this.momentService.findSpaceById(id);
        if (!space.isPresent()) {
            // Todo: notification
            System.out.println("Sorry, we cannot find the space");
            // Todo: change the url
            return new ModelAndView("redirect:/");
        }
        model.addAttribute("spaceName", space.get().getSpaceName());
        model.addAttribute("spaceDescription", space.get().getSpaceDescription());


        // Todo: find a CSS bootstrap template for the space

        // Todo: list the latest Six moments

        return new ModelAndView("space/index", "space", model);
    }

    /**
     * Delete the space. Only the owner of space can delete the space.
     *
     * @param id space id
     * @return
     */
    @RequestMapping("/space/delete-space/{id}")
    public String deleteSpace(@PathVariable("id") Long id) {
        Optional<Space> space = this.momentService.findSpaceById(id);
        if (!space.isPresent()) {
            // Todo: notification
            System.out.println("Sorry, we cannot find the space");
            // Todo: change the url
            return "redirect:/";
        }
        // Todo: waiting for the authentication
//        Get the owner of the space
//        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//        User user = this.userService.findUserByUserName(auth.getName());

        User user = new User(7L, "fu", "Fufu", "Zhang", "1004@qq.com");
        // Only owner can delete the space
        if (user.getId().equals(space.get().getOwner().getId())) {
            this.momentService.deleteSpaceById(id);
            // 所有与之相关的followers 都会自动取关么 follow表会自动更新么
            // how to double check if it need to be deleted - confirm?
        }
        // Todo: change the url of redirect
        return "redirect:/user/login/";
    }


    // Todo: edit space

    // Todo: unfollow space ++++

    // Todo: showCreateMomentForm +++

    // Todo: createMoment   +++

    // Todo: edit moment

    // Todo: delete moment

    // Todo: likes

    // Todo: comments

    // Todo: personalize your home page
}
